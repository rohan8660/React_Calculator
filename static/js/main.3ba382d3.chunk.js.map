{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","text","firstno","secno","operation","btnClickNo","clkdno","setState","btnClickOp","clkdop","btnClickEq","document","getElementById","click","a","parseInt","b","parseFloat","btnClickCl","className","readOnly","value","this","type","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ba382d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  state={\n    text:\"\",\n    firstno:'',\n    secno:'',\n    operation:''\n  }\n\n  btnClickNo = (clkdno) => {\n    let text=this.state.text+clkdno\n    this.setState({\n      text:text\n    }) \n  }\n\n  btnClickOp = (clkdop) => {\n    let firstno=this.state.text;\n    let operation=clkdop\n    this.setState({\n      operation,\n      firstno,\n      text:\"\"\n    }) \n  }\n\n  btnClickEq=()=>{\n    var pgbtn=document.getElementById(\"eq\");\n    pgbtn.click();\n    let secno=this.state.text;\n    this.setState({\n      secno:secno,\n      text:''\n    })\n    //MULTIPLY\n    if(this.state.operation===\"*\"){\n      let a=(parseInt(this.state.firstno));\n      let b=(parseInt(secno));\n      this.setState({\n        text:a*b\n      })\n    }\n\n    //DIVIDE\n    if(this.state.operation===\"/\"){\n      let a=(parseFloat(this.state.firstno));\n      let b=(parseFloat(secno));\n      this.setState({\n        text:a/b\n      })\n    }\n\n    //ADDITION\n    if(this.state.operation===\"+\"){\n      let a=(parseInt(this.state.firstno));\n      let b=(parseInt(secno));\n      this.setState({\n        text:a+b\n      })\n    }\n\n    //SUBTRACT\n    if(this.state.operation===\"-\"){\n      let a=(parseInt(this.state.firstno));\n      let b=(parseInt(secno));\n      this.setState({\n        text:a-b\n      })\n    }\n\n  }\n\n  btnClickCl=()=>{\n    this.setState({\n      text:\"\",\n      firstno:'',\n      secno:'',\n      operation:''\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n      <h1 className='center cyan-text'>Calculator</h1>\n      <div className=\"container center\">\n        <div className=\"center ioscr\">\n          <input readOnly value={this.state.text} type=\"text\"/>\n        </div>\n        <div className=\"center btns\">\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"1\")}>1</button>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"2\")}>2</button>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"3\")}>3</button>\n          <button className=\"sp btn waves-effect waves-red\" onClick={()=>this.btnClickOp(\"*\")}>*</button>\n\n          <br/>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"4\")}>4</button>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"5\")}>5</button>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"6\")}>6</button>\n          <button className=\"sp btn waves-effect waves-red\" onClick={()=>this.btnClickOp(\"/\")}>/</button>\n\n          <br/>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"7\")}>7</button>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"8\")}>8</button>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"9\")}>9</button>\n          <button className=\"sp btn waves-effect waves-red\" onClick={()=>this.btnClickOp(\"+\")}>+</button>\n\n          <br/>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\"0\")}>0</button>\n          <button className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickNo(\".\")}>.</button>\n          <button id=\"eq\" className=\"btn waves-effect waves-red\" onClick={()=>this.btnClickEq(\"=\")}>=</button>\n          <button className=\"sp btn waves-effect waves-red\" onClick={()=>this.btnClickOp(\"-\")}>-</button>\n\n          <br/>\n          <button className=\"spsp btn btn waves-effect waves-red\" onClick={()=>this.btnClickCl(\"\")}>Clr</button>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}